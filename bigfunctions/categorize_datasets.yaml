type: function_py
category: get_data
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a/ACg8ocIAw-jJTmt7AkDhU6_OvDQwsy9uyuRiWX8MxUBOdpro8lRJEgk5=s288-c-no"
description: |
  Return `categories` of a list of tables. 

  Categories are generated by genAI given tables metadata stored in `fully_qualified_table_containing_tables_metadata` of which schema must contain:

  - `dataset`: string
  - `table`: string
  - `description`: string
  - `columns`: array of struct:
      - name
      - type
      - description
arguments:
  - name: fully_qualified_table_containing_tables_metadata
    type: string
output:
  name: categories
  type: json
examples:
  - description: ""
    arguments:
      - "'bigfunctions.us.bigquery_public_tables'"
    output: "&lt;html>...&lt;/html>"
init_code: |
  import jinja2
  import google.cloud.bigquery
  import google.api_core.exceptions
  import vertexai
  from vertexai.generative_models import GenerationConfig, GenerativeModel, Part, HarmCategory, HarmBlockThreshold, SafetySetting  

  PROMPT = '''
  As a data manager you want to organize datasets into CATEGORIES and SUBCATEGORIES to improve data discovery in a data catalog.

  Return a hierarchy of CATEGORIES and their SUBCATEGORIES which which contain the BigQuery DATASETS listed in file.
  
  The returned hierarchy will respect the following constraints:
  - Each CATEGORY must have between 2 and 10 SUBCATEGORIES
  - Each SUBCATEGORY must have between 2 and 10 DATASETS
  - Each DATASET must be within one SUBCATEGORY.
  - Do not invent any DATASET

  '''


  DATASET_XML_TEMPLATE = jinja2.Template('''
  <dataset>
    <name>{{ dataset }}</name>
    <tables>
    {%- for table in tables %}
      <table>
        <name>{{ table.table }}</name>
        {%- if description %}<description>{{ table.description }}</description>{% endif %}
        <columns>{% for column in table.columns %}{{ column.name }}{{ ", " if not loop.last else "" }}{% endfor %}</columns>
      </table>
    {%- endfor %}
    </tables>
  </dataset>
  ''')    

  # DATASET_XML_TEMPLATE = jinja2.Template('''
  # <dataset>
  #   <name>{{ dataset }}</name>
  #   <tables>
  #     {% for table in tables %}
  #       <table>
  #         <name>{{ table.table }}</name>
  #         <description>{{ table.description }}</description>
  #         <columns>
  #           {% for column in table.columns %}
  #             <column>
  #               <name>{{ column.name }}</name>
  #               <type>{{ column.data_type }}</type>
  #               <description>{{ column.description }}</description>
  #             </column>
  #           {% endfor %}
  #         </columns>
  #       </table>
  #     {% endfor %}
  #   </tables>
  # </dataset>
  # ''')    

  response_schema = {
    "title": "Categorized Datasets",
    "description": "Schema for datasets organized into categories and subcategories.",
    "type": "object",
    "properties": {
      "categories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the category",
            },
            "subcategories": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the subcategory",
                  },
                  "datasets": {
                    "type": "array",
                    "items": {
                      "type": "string",
                    }
                  }
                },
                "required": ["name", "datasets"]
              }
            }
          },
          "required": ["name", "subcategories"]
        }
      }
    },
    "required": ["categories"]
  }


  safety_config = [
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold=HarmBlockThreshold.OFF,
      ),
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold=HarmBlockThreshold.OFF,
      ),
  ]

  bigquery = google.cloud.bigquery.Client()  
  vertexai.init(location="europe-west1")


code: |
  assert fully_qualified_table_containing_tables_metadata, 'invalid fully_qualified_table_containing_tables_metadata: it is null or empty'
  assert len(fully_qualified_table_containing_tables_metadata.split('.')) == 3, 'invalid fully_qualified_table_containing_tables_metadata: it should be like PROJECT.DATASET.TABLE'

  try:
    df = bigquery.query(f'''
      select dataset, table, columns
      from `{fully_qualified_table_containing_tables_metadata}`
    ''').to_dataframe()
  except (google.api_core.exceptions.Forbidden, google.api_core.exceptions.NotFound, google.api_core.exceptions.PermissionDenied) as e:
    assert False, f'Service Account `{get_current_service_account()}` does not have data-editor permission for given destination dataset (or the dataset does not exsit). Please add it'

  datasets_xml = []
  for dataset, _df in df.groupby('dataset'):
    tables = _df[['table', 'columns']].iloc[:min(10, _df.shape[0])]
    tables = tables.to_dict(orient='records')
    xml = DATASET_XML_TEMPLATE.render(
      dataset=dataset,
      tables=tables,
    )
    datasets_xml += [xml]
  datasets_xml = '\n\n'.join(datasets_xml)

  with open('datasets.xml', 'w') as f:
    f.write(datasets_xml)  

  # print(len(datasets_xml))
  # print(datasets_xml[:1000])


  # prompt = PROMPT + datasets_xml
  model = GenerativeModel("gemini-1.5-flash-002")

  contents = [
      PROMPT,
      Part.from_text(datasets_xml),
  ]

  response = model.generate_content(
    contents, 
    safety_settings=safety_config, 
    generation_config=GenerationConfig(
      response_mime_type="application/json", 
      response_schema=response_schema
    ),
  )
  with open('categories.json', 'w') as f:
    f.write(response.text)

  import json
  categories = json.loads(open('categories.json').read())
  dataset_categories = []
  for category in categories['categories']:
    for subcategory in category['subcategories']:
      for dataset in subcategory['datasets']:
        dataset_categories.append({
          "dataset": dataset,
          "path": f"{category['name']}/{subcategory['name']}/{dataset}"
        })
  import pandas as pd
  dataset_categories = pd.DataFrame.from_records(dataset_categories)
  breakpoint()
  return 'ok'

requirements: |
  jinja2
  google-cloud-bigquery[pandas]
  google-cloud-bigquery-storage
  google-cloud-aiplatform
quotas:
  max_rows_per_query: 10
