type: function_py
category: AI
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a/ACg8ocIAw-jJTmt7AkDhU6_OvDQwsy9uyuRiWX8MxUBOdpro8lRJEgk5=s288-c-no"
description: |
  Return `categories` of `items`. 

  Using GenAi, this function generates a hierarchy of categories and subcategories that best represents the given `items`.
  Each item will then be associated to a category and subcategory.
  The function returns, the path of each item `{category}/{subcategory}` in the hierarchy.

  - `items`: must be a json array of strings or a json array of objects. In case of objects, they must have a key `name`.
  - Returned `categories` is a json array with the same length as `items` formatted like `[{item_name, category_path}]`. If input `items` are string then, `item_name` is the string. Else if input `items` are object then `item_name` is the value at their `name` key.
arguments:
  - name: items
    type: json
output:
  name: categories
  type: json
examples:
  - description: ""
    arguments:
      - |
        [
          'foo'
        ]
    output: "&lt;html>...&lt;/html>"
init_code: |
  import json
  
  import dicttoxml
  import vertexai
  from vertexai.generative_models import GenerationConfig, GenerativeModel, Part, HarmCategory, HarmBlockThreshold, SafetySetting  

  MODEL = "gemini-1.5-flash-002"
  PROMPT = '''
  As a data manager you want to organize ITEMS into CATEGORIES and SUBCATEGORIES to improve data discovery in a data catalog.

  Return a hierarchy of CATEGORIES and their SUBCATEGORIES which contain the ITEMS listed in file.
  
  The returned hierarchy will respect the following constraints:
  - Each CATEGORY must have between 2 and 10 SUBCATEGORIES
  - Each SUBCATEGORY must have between 2 and 10 ITEMS
  - Each ITEM must be within one SUBCATEGORY.
  - Do not invent any ITEM

  '''

  response_schema = {
    "title": "Categorized Datasets",
    "description": "Schema for items organized into categories and subcategories.",
    "type": "object",
    "properties": {
      "categories": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the category",
            },
            "subcategories": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the subcategory",
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string",
                    }
                  }
                },
                "required": ["name", "items"]
              }
            }
          },
          "required": ["name", "subcategories"]
        }
      }
    },
    "required": ["categories"]
  }

  generation_config=GenerationConfig(
    response_mime_type="application/json", 
    response_schema=response_schema
  )

  safety_config = [
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
          threshold=HarmBlockThreshold.OFF,
      ),
      SafetySetting(
          category=HarmCategory.HARM_CATEGORY_HARASSMENT,
          threshold=HarmBlockThreshold.OFF,
      ),
  ]

  vertexai.init(location=CURRENT_LOCATION)
  model = GenerativeModel(MODEL)
code: |
  if not items:
    return []

  assert isinstance(items, list), 'Given `items` must be a json array of strings or a json array of objects'
  first_item = items[0]
  assert all(isinstance(item, type(first_item)) for item in items), 'Given `items` have mixed types. They must all be string or all be objects'
  if isinstance(first_item, str):
    items_xml = '\n\n'.join(f'<item>{item}</item>' for item in items)
  elif isinstance(first_item, dict):
    assert all('name' in item for item in items), 'Given `items` objects must all have a `name` key.'
    items_xml = dicttoxml.dicttoxml(items, custom_root='items', attr_type=False, xml_declaration=False).decode('utf-8')
    print(items_xml)
  else:
    assert False, 'Given `items` have bad type. They must all be strings or all be objects'
    

  contents = [
      PROMPT,
      Part.from_text(items_xml),
  ]

  response = model.generate_content(
    contents, 
    safety_settings=safety_config, 
    generation_config=generation_config,
  )

  categories = response.text
  categories = json.loads(categories)
  item_categories = []
  for category in categories['categories']:
    for subcategory in category['subcategories']:
      for item in subcategory['items']:
        item_categories.append({
          "item": item,
          "path": f"{category['name']}/{subcategory['name']}/{item}"
        })
  return item_categories
requirements: |
  dicttoxml
  google-cloud-aiplatform
quotas:
  max_rows_per_query: 1
  max_rows_per_user_per_day: 100
