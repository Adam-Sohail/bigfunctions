type: procedure
category: explore
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a-/ACB-R5RDf2yxcw1p_IYLCKmiUIScreatDdhG8B83om6Ohw=s260"
description: Show funnels (WORK IN PROGRESS)
arguments:
  - name: events_table
    type: string
  - name: event_types
    type: array<string>
examples:
  - description: ""
    arguments:
      - "'compte-nickel-dataprod.TEMP.EVENT_TYPE_SNOWPLOW2'"
      - '["UserProfile", "PhoneNumberEditionWorkflowIntroduction", "PhoneNumberEditionForm", "PasswordChallenge", "CodeEmailChallenge", "CodeSMSChallenge"]'
code: |
  assert array_length(split(events_table, '.')) = 3 as 'BAD ARGUMENT FORMAT: `events_table` argument must follow the pattern `PROJECT.DATASET.TABLE`';

  execute immediate {BIGFUNCTIONS_DATASET}.render_template(
    r'''
    {%- set events_table = events_table.replace('`', '') -%}

    create or replace temp table bigfunction_result as

    with

    events as (

      select
        user_id,
        timestamp,
        event_type,
      from `{{ events_table }}`
      where event_type in unnest({{ event_types | dump | safe }})

    ),


    journeys as (

      select
        event_type,
        array_agg(
          struct(
            event_type,
            timestamp
          )
        ) over (
          partition by user_id
          order by timestamp
          rows between current row and {{ (event_types | length) - 1 }} following
        ) as journey,
      from events
      qualify event_type = '{{ event_types[0] }}'

    ),


    journeys_enriched as (

      select
        array((
          select struct(
            event.event_type,
            event.timestamp,
            event.event_type = {{ event_types | dump | safe }}[offset(index)] as is_correct_event_type
          )
          from unnest(journey) as event
          with offset index
          order by index
        )) as journey,
      from journeys

    ),


    journeys_cleaned as (

      select
        array((
          select event.event_type
          from unnest(journey) as event
          with offset index
          where index < ifnull((
            select ix
            from unnest(journey) as evt
            with offset ix
            where evt.is_correct_event_type is false
            order by ix
            limit 1
          ), {{ event_types | length }})
          order by index
        )) as journey
      from journeys_enriched

    ),


    event_types_counts as (

      select
        event_type,
        count(*) as nb,
      from journeys_cleaned,
      unnest(journey) as event_type
      group by 1 order by 2 desc

    )


    select to_json(struct(
      array_agg(struct(t).t order by nb desc) as event_types_counts
    )) as json
    from event_types_counts as t


    ''',
    to_json(struct(
      events_table,
      event_types
    ))
  );
template: |
  <style>
    #bf-container {
        min-height: 100%;
        margin: 0;
        background: #393862;
    }

    .funnel {
        margin: 24px auto;
    }

    .flex {
        display: flex;
    }

    .method-buttons {
        display: flex;
        justify-content: center;
        margin-top: 48px;
    }

    button {
        margin-left: 8px;
        margin-right: 8px;
    }
  </style>

    <div class="flex">
        <div class="funnel">
        </div>
    </div>


    <script>
      (function() {

        const event_types_counts = {{ event_types_counts | dump | safe }};


        var dataExample2 = {
            labels: event_types_counts.map( ({event_type, nb}) => event_type),
            colors: ['#FFB178', '#FF3C8E'],
            values: event_types_counts.map( ({event_type, nb}) => nb)
        };

        var dataExample3 = {
            labels: ['Impressions', 'Add To Cart', 'Buy'],
            subLabels: ['Direct', 'Social Media', 'Ads'],
            colors: [
                ['#FFB178', '#FF78B1', '#FF3C8E'],
                ['#A0BBFF', '#EC77FF'],
                ['#A0F9FF', '#7795FF']
            ],
            values: [
                [3500, 2500, 6500],
                [3300, 1400, 1000],
                [600, 200, 130]
            ],
        };

        try {
        var graph = new FunnelGraph({
            container: '.funnel',
            gradientDirection: 'horizontal',
            data: dataExample2,
            displayPercent: true,
            direction: 'horizontal',
            width: 800,
            height: 300,
            subLabelValue: 'raw'
        });

        graph.draw();

        } catch (error) {
          console.error(error);
          // Expected output: ReferenceError: nonExistentFunction is not defined
          // (Note: the exact output may be browser-dependent)
        }
      })();

    </script>



