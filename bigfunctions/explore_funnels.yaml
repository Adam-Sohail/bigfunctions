type: procedure
category: explore
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a-/ACB-R5RDf2yxcw1p_IYLCKmiUIScreatDdhG8B83om6Ohw=s260"
description: Show funnels (WORK IN PROGRESS)
arguments:
  - name: events_table
    type: string
  - name: event_types
    type: array<string>
examples:
  - description: ""
    arguments:
      - "'compte-nickel-dataprod.TEMP.EVENT_TYPE_SNOWPLOW2'"
      - '["UserProfile", "PhoneNumberEditionWorkflowIntroduction", "PhoneNumberEditionForm", "PasswordChallenge", "CodeEmailChallenge", "CodeSMSChallenge"]'
code: |
  assert array_length(split(events_table, '.')) = 3 as 'BAD ARGUMENT FORMAT: `events_table` argument must follow the pattern `PROJECT.DATASET.TABLE`';

  execute immediate {BIGFUNCTIONS_DATASET}.render_template(
    r'''
    {%- set events_table = events_table.replace('`', '') -%}

    create or replace temp table bigfunction_result as

    with

    events as (

      select
        user_id,
        timestamp,
        event_type,
      from `{{ events_table }}`
      where event_type in unnest({{ event_types | dump | safe }})

    ),


    journeys as (

      select
        event_type,
        array_agg(
          struct(
            event_type,
            timestamp
          )
        ) over (
          partition by user_id
          order by timestamp
          rows between current row and {{ (event_types | length) - 1 }} following
        ) as journey,
      from events
      qualify event_type = '{{ event_types[0] }}'

    ),


    journeys_enriched as (

      select
        array((
          select struct(
            event.event_type,
            event.timestamp,
            event.event_type = {{ event_types | dump | safe }}[offset(index)] as is_correct_event_type
          )
          from unnest(journey) as event
          with offset index
          order by index
        )) as journey,
      from journeys

    ),


    journeys_cleaned as (

      select
        array((
          select event.event_type
          from unnest(journey) as event
          with offset index
          where index < ifnull((
            select ix
            from unnest(journey) as evt
            with offset ix
            where evt.is_correct_event_type is false
            order by ix
            limit 1
          ), {{ event_types | length }})
          order by index
        )) as journey
      from journeys_enriched

    ),


    journey_event_pairs as (

      select
        array((
          select
            struct(
              event_type,
              ifnull(journey[safe_offset(index + 1)], 'OTHER') as next_event_type
            )
          from unnest(journey) as event_type
          with offset index
        )) as journey
      from journeys_cleaned

    ),


    journey_event_pairs_count as (
      select
        event_type,
        next_event_type,
        count(*) as nb,
      from journey_event_pairs,
      unnest(journey)
      where
        event_type != '{{ event_types[-1] }}' and
        next_event_type != 'OTHER'
      group by 1, 2
      order by 3 desc

    )

    select to_json(struct(
      array_agg(struct(t).t order by nb desc) as event_pairs
    )) as json
    from journey_event_pairs_count as t


    ''',
    to_json(struct(
      events_table,
      event_types
    ))
  );
template: |
  <p class="title is-size-4">Flow</p>
  <div id="bf-sankey" style="width: 100%; height: 200px; margin: 0 auto"></div>


  <script>
    (function() {
      const event_pairs = {{ event_pairs | dump | safe }};

      const drawSankey = function() {
        let data = event_pairs.map( ({event_type, next_event_type, nb}) => [event_type, next_event_type, nb]);
        var table = new google.visualization.DataTable();
        table.addColumn('string', 'From');
        table.addColumn('string', 'To');
        table.addColumn('number', 'value');
        table.addRows(data);

        var options = {
          width: '100%',
          sankey: {
            iterations: 100,
            node: { interactivity: true },
            link: { colorMode: 'gradient' },
          }
        };

        var chart = new google.visualization.Sankey(document.getElementById('bf-sankey'));
        chart.draw(table, options);
      };



      drawSankey();

    })();
  </script>


