type: function_py
category: export
author:
  name: Antoine Giraud
  url: https://www.linkedin.com/in/antgiraud/
  avatar_url: "https://media.licdn.com/dms/image/C4D03AQG2Orctig4ycg/profile-displayphoto-shrink_200_200/0/1532385599321?e=1712188800&v=beta&t=VPFKpN1WIzDyPIbB4zofLUVS3HsIADd2ENh-MdmGGC0"
description: |
  Refresh a tableau datasource/workbook via it's REST API by giving the object full title
  the python script will :
  - [login](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_auth.htm) to tableau via the secret `tableau_credentials_json` stored/configured in GCP
  - [search](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_filtering_and_sorting.htm) for a datasource/workbook with the given title to fetch it's UID
  - launch a [refresh](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref_data_sources.htm#update_data_source_now), if accepted will return the api call json content
  - logout
arguments:
  - name: workbook_or_datasource_title
    type: string
  - name: site
    type: string
  - name: server
    type: string
  - name: token_name
    type: string
  - name: token_secret
    type: string
output:
  name: response
  type: string
examples:
  - description: "Try to refresh a non exising resource"
    arguments:
      - "'some non existing name'"
      - "'some non existing name'"
      - "'some non existing name'"
      - "'some non existing name'"
      - "'some non existing name'"
    output: "not_found"
  - description: "refresh object titre connu"
    arguments:
      - "'Pilotage vol. de leads'"
      - "'Pilotage vol. de leads'"
      - "'Pilotage vol. de leads'"
      - "'Pilotage vol. de leads'"
      - "'Pilotage vol. de leads'"
    output: 'ok'
code: |
  import requests, json

  if not workbook_or_datasource_title:
    return 'missing_workbook_or_datasource_title'
  if not server:
    return 'missing_server'
  if not token_name:
    return 'missing_token_name'
  if not token_secret:
    return 'missing_token_secret'

  base_url = f'https://{server}/api/3.21'


  # ------------------------------------------------- #
  # LOGIN
  # ------------------------------------------------- #
  signin_url = f"{base_url}/auth/signin"
  print(signin_url)
  headers = {'accept': 'application/json', 'content-type': 'application/json'}
  data = {
    "credentials": {
      "personalAccessTokenName": token_name,
      "personalAccessTokenSecret": token_secret,
      "site": {"contentUrl": site or ''}
    }
  }
  response = requests.post(signin_url, json=data, headers=headers)
  if not response.ok:
    return f'error_login: {response.status_code} -- {response.text}'
  content = response.json()
  headers['X-tableau-auth'] = content["credentials"]["token"]
  site_id = content["credentials"]["site"]["id"]


  # ------------------------------------------------- #
  # SEARCH OBJECT
  # Doc: https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_filtering_and_sorting.htm
  # ------------------------------------------------- #
  params = {
    'terms': workbook_or_datasource_title,
    'filter': f'type:in:[workbook,datasource]',
    'limit': 1,
  }
  response = requests.get(f"https://{server}/api/-/search", headers=headers, params=params)
  if not response.ok:
    return f'error_search: {response.status_code} -- {response.text}'
  content = response.json()
  items = content['hits']['items']
  obj = next(
    (item for item in items if item['content']['title'] == workbook_or_datasource_title),
    None
  )
  if obj is None:
    return 'not_found'
  obj_type = obj['content']['type']
  if obj_type == 'unifieddatasource':
    obj_type = 'datasource'
  obj_id = obj['content']['datasourceLuid'] if 'datasourceLuid' in obj['content'] else obj['content']['luid']


  # ------------------------------------------------- #
  # REFRESH OBJECT
  # Doc Data Source: https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref_data_sources.htm#update_data_source_now
  # Doc Workbook: https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref_workbooks_and_views.htm#update_workbook_now
  # ------------------------------------------------- #
  refresh_url = f"{base_url}/sites/{site_id}/{obj_type}s/{obj_id}/refresh"
  response = requests.post(refresh_url, json={}, headers=headers)
  if not response.ok:
    return f'error_refresh_object: {response.status_code} refresh:  {response.text}'


  # ------------------------------------------------- #
  # SIGN OUT
  # ------------------------------------------------- #
  signout_url = f"{base_url}/auth/signout"
  response = requests.post(signout_url, headers=headers)
  if not response.ok:
    return f'error_sign_out: {response.status_code} refresh:  {response.text}'

  return 'ok'
requirements: |
  requests
quotas:
  max_rows_per_query: 10
